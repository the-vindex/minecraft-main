----- Modified DW20 program which displays amount of essentia in jars
rednet.open("top")
os.loadAPI("button")
local AUTO_FILL_QUANTITY = 50
local FILL_LIMIT = 64
local SETTINGS_FILE = "aspekt.cfg"
local turtleID -- filled from settings file above
local essentia = {}
local jars = peripheral.getNames()
local m = peripheral.wrap("right")
local monCoord = {}
local currEssentia
local fillAmt = 0
local rowsActive = true


function sortEss(t)
   local keys = {}
   for k in pairs(t) do keys[#keys+1] = k end
   table.sort(keys)
   
   local i = 0
   return function()
      i = i+1
      if keys[i] then
         return keys[i], t[keys[i]]
      end
   end
end

function getAspectCount(peripheralName, peripheralType, aspectInfo)
   local aspectName
   local countasp 
   if peripheralType == "tt_aspectContainer" then
		countasp = peripheral.call(peripheralName, "getAspectCount", aspectInfo)
		if countasp == nil then countasp = 0 end
		aspectName = aspectInfo
   elseif peripheralType == "tilejarvoid" then
		countasp = aspectInfo[1]["quantity"]
		aspectName = aspectInfo[1]["name"]
   else 
		error("Unknown type: "..peripheralType)
   end

   return string.lower(aspectName), countasp
end

function scanEssentia()
  essentia = {}
  for i,peripheralName in ipairs(jars) do
	 local peripheralType = peripheral.getType(peripheralName)
     if peripheralType == "tt_aspectContainer" or peripheralType == "tilejarvoid" then	   
       local asp = peripheral.call(peripheralName, "getAspects")

	   if asp ~= nil then
			
			local aspectName
			local countasp 
			aspectName, countasp = getAspectCount(peripheralName, peripheralType, asp)
   
--		   if countasp > 0 then
			  if essentia[aspectName] == nil then
				essentia[aspectName] = 0
			  end
			  essentia[aspectName] = essentia[aspectName] + math.floor(countasp)
--		   end

		   print(aspectName..":"..countasp)
	   end
--     print(peripheral.getType(peripheralName))
     end
  end
end

function printEssentia()
  m.setTextColor(colors.white)
  local x = 1
  local y = 1
  monCoord[x] = {}
--  for a = 1,17 do
  for i,j in sortEss(essentia) do
     if j<=20 then m.setTextColor(colors.red) end
     if j<40 and j>20 then m.setTextColor(colors.yellow) end
     if j>=40 then m.setTextColor(colors.green) end
     
     m.setCursorPos(x,y)
     m.write(i)
     m.setCursorPos(x+14,y)
     m.write(tostring(j))
--     print(j)
     monCoord[x][y] = i
     if y < 17 then
        y = y+1
     else
        y = 1
        x = x+17
        monCoord[x] = {}   
     end
  end
-- end
 m.setTextColor(colors.white)
end

function getClick()
   local timerId = os.startTimer(15)
   local event,side,x,y = os.pullEvent()
   if event=="monitor_touch" then
     if button.checkxy(x,y) then
        print("button")
     else
        if rowsActive then
          fillAmt = 0
          print(x..":"..x-(x%17)+1)
          print(monCoord[x-(x%17)+1][y])
          currEssentia = monCoord[x-(x%17)+1][y]
          if currEssentia ~= nil then
          if essentia[currEssentia] < FILL_LIMIT then
             fillTable2()
          else
             m.clear()
             button.label(1,10, currEssentia.." is already full.  Please choose another.")
             sleep(3)
             refresh()
          end
          end
        end
     end
   elseif event=="timer" and side == timerId then
		autofillEssentia()
   end
end

function autofillEssentia()
	for aspectName, quantity in pairs(essentia) do
		if quantity < AUTO_FILL_QUANTITY then
			currEssentia = aspectName
			fillAmt = AUTO_FILL_QUANTITY - quantity
			fillEss()
		end
	end
end

function refresh()
   button.flash("Refresh")
   m.clear()
   scanEssentia()
   printEssentia()
   print("Refreshed")
   button.screen()
end

function fillTable()
   rowsActive = true
   button.clearTable()
   button.setTable("Refresh", refresh, "", 15, 35, 19, 19)
   button.screen()
end

function addEss(num)
   fillAmt = fillAmt + num
   if fillAmt < 0 then fillAmt = 0 end
   if fillAmt > FILL_LIMIT-essentia[currEssentia] then fillAmt = FILL_LIMIT-essentia[currEssentia] end
   m.clear()
   fillTable2()
end

function fillEss()
   local essData = {}
   essData[1] = currEssentia
   essData[2] = fillAmt
   local sendData = ""
   sendData = textutils.serialize(essData)
   rednet.send(turtleID, sendData)
   m.clear()
   button.label(7, 10, "Waiting for aspects to finish cooking....")
   button.label(7, 12, "Don't forget to refresh the screen after")
   button.label(7, 13, "the golem is done moving the essentia.")
   rednet.receive()
   m.clear()
   fillTable()
   refresh()
end

function cancel()
   m.clear()
   fillTable()
   refresh()
end   

function fillTable2()
   rowsActive = false
   button.clearTable()
   m.clear()
   button.label(7, 1, "Essentia: "..currEssentia.." contains "..essentia[currEssentia])
   button.setTable("+1", addEss, 1, 8, 18, 6,6)
   button.setTable("+5", addEss, 5, 20, 30, 6, 6)
   button.setTable("+10", addEss, 10, 32, 42, 6, 6)
   button.setTable("-1", addEss, -1, 8, 18, 8, 8)
   button.setTable("-5", addEss, -5, 20, 30, 8, 8)
   button.setTable("-10", addEss, -10, 32, 42, 8 ,8)
   button.setTable("Refill Jar", addEss, FILL_LIMIT-essentia[currEssentia], 8, 42, 10, 10)
   button.setTable("Execute Fill Request", fillEss, "", 8, 42, 16, 18)
   button.setTable("Cancel", cancel, "", 20, 30, 12, 14)
   button.label(7, 4, "Currently Adding "..fillAmt.." "..currEssentia.." essentia.")
   button.screen()
end

function saveTable(t,name)
	local file = fs.open(name,"w")
	file.write(textutils.serialize(t))
	file.close()
end

function loadTable(name)
	local file = fs.open(name,"r")
	local data = file.readAll()
	file.close()
	return textutils.unserialize(data)
end

function initializeTurtleId()
	local settings
	if fs.exists(SETTINGS_FILE) then
		settings = loadTable(SETTINGS_FILE)
		if settings == nil or settings.turtleID == nil then
			fs.delete(SETTINGS_FILE)
			settings = nil
		end
	end
	if settings == nil then
		local turtleID
		repeat
			io.write("Input turtle ID for burning mana beans:")
			turtleID = io.read()
		until tonumber(turtleID) ~= nil
		settings = {}
		settings["turtleID"] = turtleID
		saveTable(settings, SETTINGS_FILE)
		print("Settings for this program are stored in aspekt.cfg")
	end
	return settings.turtleID
end

if m == nil then
	print("Error, monitor not wrapped!")
	exit(1)
end

turtleID = initializeTurtleId()

fillTable()
refresh()

while true do getClick() end