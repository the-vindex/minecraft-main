function printApi(obj)
	local count = 0
	local text= ""
	for i,v in pairs(p) do
		text = text .. i .. "\n"
	end
	textutils.pagedPrint(text)
end

function printInventory(inv)
    local text = ""
	for i = 0,inv.getSizeInventory() do
		local slot = inv.getStackInSlot(i)
		if slot ~= nil then
			text = text.."Slot number "..i.."\n"
			for key, value in pairs(slot) do
				text = text..key.. " = " .. tostring(value) .. "\n"
			end
		end
	end
	textutils.pagedPrint(text)
end

function printArray(arr,interactive)
	local text = ""
	for i,v in ipairs(arr) do
		text = text .. i .. ":" .. v .. "\n"
	end
	if (interactive) then
		textutils.pagedPrint(text)
	else
		print(text)
	end
end

inoculator = peripheral.wrap("front")
--printInventory(p)
--printApi(p)

local TURTLE_DIRECTION = "west"
local SLOT_OCCUPIED = "present"
local SLOT_EMPTY = "empty"

local INOCULATOR_SERUM_SLOT=15
local INOCULATOR_OUTPUT_SLOTS_START=9
local INOCULATOR_INPUT_SLOTS_START=3

function processSlotInfo(slotInfo, intoLocalInfo, index)
	if slotInfo ~= nil then
		intoLocalInfo[index] = SLOT_OCCUPIED
	else
		intoLocalInfo[index] = SLOT_EMPTY
	end
end

function isSlotEmpty(dataTable, index)
	return dataTable[index] == SLOT_EMPTY
end

function isAllSlotsEmpty(dataTable)
	local empty = true
	for i,v in ipairs(dataTable) do
		if not(isSlotEmpty(dataTable,i)) then
			empty = false
		end
	end
	return empty
end

function isItemsPresent(dataTable)
	return not(isAllSlotsEmpty(dataTable))
end

function getDataFromInoculator(inventoryStart,inventorySize,localData)
	local index = 0
	for i=inventoryStart,inventoryStart + inventorySize - 1 do
		index = index + 1
		local slot = inoculator.getStackInSlot(i)
		
		processSlotInfo(slot, localData, index)
		
	end
end

function getFirstEmptyTurtleSlot()
	for i=1,16 do
		if turtle.getItemCount(i) == 0 then
			return i
		end
	end
end

local input = {}
local output = {}
local processing = {}
local serum = {}

getDataFromInoculator(INOCULATOR_INPUT_SLOTS_START, 6, input) ------ INPUT SLOTS
getDataFromInoculator(INOCULATOR_OUTPUT_SLOTS_START, 6, output) ------ OUTPUT SLOTS
getDataFromInoculator(15, 1, serum) ------ SERUM SLOT
getDataFromInoculator(2, 1, processing) ------ PROCESSING SLOT

-- printArray(input)
-- printArray(output)
-- printArray(serum)
-- printArray(processing)

if isAllSlotsEmpty(input) and isAllSlotsEmpty(processing) and isItemsPresent(output) and isItemsPresent(serum) then
	print("Conditions met, moving")
	-- remove serum, move output to input. Expect new serum to come from the hopper above
	inoculator.push(TURTLE_DIRECTION,INOCULATOR_SERUM_SLOT,1)
	--local turtleBeeSlotsStart=10	
	for i=0,5 do
		--inoculator.pushIntoSlot(TURTLE_DIRECTION,INOCULATOR_OUTPUT_SLOTS_START+i,1,turtleBeeSlotsStart+i)
		inoculator.swapStacks(INOCULATOR_OUTPUT_SLOTS_START+i,INOCULATOR_INPUT_SLOTS_START+i)
	end
else
	print("Conditions not met, exiting")
end

------General info
-- All slots are OpenPeripheral numbers based from 0.
-- Inoculator:
-- slot 2 - bee being inoculated right now
-- slot 3..8 - backlog 1..6
-- slot 9..14 - output 1..6
-- slot 15 - serum

----- Serum
-- Name - what is this
-- dmg - number of charges missing from full (dmg=4 => 12 charges)