--Make sure there is an inventory above the turtle that can hold one of each mana bean you have.
 
--Mana Bean item ID
local manaBeanId =25366

rednet.open("right")
 
--Request Logistics Pipe
local req=peripheral.wrap("bottom")
 
--Achemical Furnace
local f=peripheral.wrap("front")
 
--table that holds the item identifier to aspect relations
local beans={}
local alter={}

local alterDef = {}

function aspsrc(item,amount)
	return {item=item,amount=amount}
end

function item(id,dmg)
	local it = {}
	it["id"] = id
	it["dmg"] = dmg
	return it
end

function initializeTurtle()
   turtle.select(1)
  req.setTurtleConnect(true)
end

function initializeBeans()	
	local aspectNameToUid = {}

	local items = req.getAvailableItems()
	for k,v in pairs(items) do
		local itemUid = v[1]
		local id=req.getItemID(itemUid)
		if manaBeanId==id then -- check item ID if it's manabean
			local nbt = req.getNBTTagCompound(itemUid)
			local nbtValues = nbt["value"]
			local aspects = nbtValues["Aspects"]
			local aspectsValue = aspects["value"][1]["value"]["key"]
			local aspectName = aspectsValue["value"]
			aspectNameToUid[aspectName] = itemUid
		end
	end
	return aspectNameToUid
end

--prepare UIDs for items, which can be burnt for essentia
function initializeAlternatives()
	local aspectNameToUid = {}

	for aspectName,aspectSource in pairs(alterDef) do
		local uid = req.getItemIdentifierIDFor(aspectSource['item']['id'],aspectSource['item']['dmg'])
		if uid ~= nil then
			aspectNameToUid['aspectName'] = aspsrc(uid,aspectSource['amount'])
		end
	end
	return aspectNameToUid
end

function getItemCount()
  local sum=0
  for s=1,16 do
    sum=sum+turtle.getItemCount(s)
  end
  return sum
end

function requestAlternative(aspect,qty)
	local uid = alter[aspect]['item']
	if uid == nil then return 0 end
	
	local aspectPerItem = alter[aspect]['amount']
	
	local qtyToRequest = math.floor(qty/aspectPerItem)
	
	local received = requestItem(beans[aspect],qtyToRequest)
	
	return received*aspectPerItem
end

function requestBeans(aspect,qty)
	return requestItem(beans[aspect],qty)
end

-- request certain item in specific quantity
-- returns amount of item really received
function requestItem(uid,qty)
  local avail=req.getItemAmount(uid)
  print("available:"..avail)
  print("qty:"..qty)
  if avail<qty then
    qty=avail
  end
  req.makeRequest(beans[aspect],qty)
  while getItemCount()<qty do
    print("Waiting for beans")
    sleep(.5)
  end
  return qty
end

function essentia(aspect, numAspect)
	if not f.getStackInSlot(1) then
  
		local alternativeAspectProvided = requestAlternative(aspect, numAspect)
		if alternativeAspectProvided > 0 then
			turtle.drop()
			waitForEmptyFurnace()
		end
	  
		numAspect = numAspect - alternativeAspectProvided
		
		if numAspect > 0 then
			requestBeans(aspect,numAspect)
			turtle.drop()
		end
	end
	waitForEmptyFurnace()
end

function waitForEmptyFurnace()
   while f.getStackInSlot(1) do
      print("Waiting for empty furnace....")
      sleep(3)
   end
end
 
function awaitRednet()
  local id, msg, dist = rednet.receive()
  term.write(msg)
  local essData = {}
  essData = textutils.unserialize(msg)
  print(essData[1]..":"..essData[2])
  essentia(essData[1], tonumber(essData[2]))
  rednet.send(id, "Complete")
end

alterDef['praecantio'] = aspsrc(item(372),1)

initializeTurtle()
beans=initializeBeans()
alter=initializeAlternatives()

while true do
   awaitRednet()
end